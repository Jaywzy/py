<!-- doc/src/sgml/ltfce.sgml -->
<sect1 id="ltfce" xreflabel="ltfce">
 <title>ltfce</title>
 <indexterm zone="ltfce">
  <primary>ltfce</primary>
 </indexterm>
 <para><filename>ltfce</filename> - All mode's compatibility functions and operators.
 </para>
 <sect2>
  <title>Features Compatible with all mode</title>
  <para>
   Features compatible with all mode are provided.
   Functions and operators are created under lt_catalog.

   The table below lists features that can be used in all mode.
  </para>

  <table>
   <title>Functions</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>
       <para>
       Item
      </para>
      </entry>
      <entry>
       <para>
           Overview
      </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
          DATABASE
       </para>
      </entry>
      <entry>
       <para>
           Return current schema as current database
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
           LOCATE
       </para>
      </entry>
      <entry>
       <para>
          Return the position of the substring in the string  
       </para>
      </entry>
     </row>  
    </tbody>
   </tgroup>
  </table>
  <table>
   <title>Operator type compatibility</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry>
       <para>
       Item
      </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
          LEFTARG:int2
          RIGHTARG:text
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
          LEFTARG:int4
          RIGHTARG:text
       </para>
      </entry>
     </row> 

     <row>
      <entry>
       <para>
          LEFTARG:int8
          RIGHTARG:text
       </para>
      </entry>
     </row>

     <row>
      <entry>
       <para>
          LEFTARG:text
          RIGHTARG:int2
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
          LEFTARG:text
          RIGHTARG:int4
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
          LEFTARG:text
          RIGHTARG:int8
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
          LEFTARG:text
          RIGHTARG:numeric
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
          LEFTARG:numeric
          RIGHTARG:text
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>
 <sect2>
  <title>Functions</title>
  <itemizedlist>
    <listitem>
     <para>DATABASE</para>
    </listitem>
    <listitem>
     <para>LOCATE</para>
    </listitem>
   </itemizedlist>
   <sect3>
    <title>DATABASE</title>
    <para>
     <emphasis role="bold">
     Description
    </emphasis>
    </para>
    <para>
     Synonym for current_schema(). The concept of schema is similar to that of database in MySQL. You can specify the current schema by setting the search_path.
    </para>
    <para>
     <emphasis role="bold">
     Syntax
    </emphasis>
    </para>
    <programlisting>
database() RETURNS text
    </programlisting>
    <para>
     <emphasis role="bold">
       General rules
      </emphasis>
    </para>
    <itemizedlist>
     <listitem>
      <para>
        	Returns the name of the schema that is first in the search path (or a null value if the search path is empty).
        </para>
     </listitem>
     <listitem>
      <para>
          Like mysql,This is the schema that will be used for any tables or other named objects that are created without specifying a target schema.
        </para>
     </listitem>
    </itemizedlist>    
    <para>
     <emphasis role="bold">
      Example
	   </emphasis>
    </para>
    <programlisting>
lightdb@lt_test=# select database();
 database 
----------
 public
(1 row)
    </programlisting>
   </sect3>
   <sect3>
    <title>LOCATE</title>
    <para>
     <emphasis role="bold">
     Description
    </emphasis>
    </para>
    <para>
     Return the position of the first occurrence of substring.
    </para>
    <para>
     <emphasis role="bold">
     Syntax
    </emphasis>
    </para>
    <programlisting>
LOCATE(substr TEXT,str TEXT) returns INTEGER
LOCATE(substr TEXT,str TEXT,POS INTEGER) returns INTEGER
    </programlisting>
    <para>
     <emphasis role="bold">
     General rules
    </emphasis>
    </para>
    <itemizedlist>
     <listitem>
      <para>
       The first syntax returns the position of the first occurrence of substring <emphasis>substr</emphasis> in string <emphasis>str</emphasis>. 
      </para>
     </listitem>
     <listitem>
      <para>
       The second syntax returns the position of the first occurrence of substring <emphasis>substr</emphasis> in string <emphasis>str</emphasis>, starting at position <emphasis>pos</emphasis>. 
      </para>
     </listitem>
     <listitem>
      <para>
        Returns 0 if <emphasis>substr</emphasis> is not in <emphasis>str</emphasis>.
      </para>
     </listitem>
     <listitem>
      <para>
       Returns NULL if any argument is NULL.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     <emphasis role="bold">
     Example
    </emphasis>
    </para>
    <para>
     In the following example,position of 'bar' in 'foobarbar', starting at position 5.
     is returned.
    </para>
    <programlisting>
SELECT LOCATE('bar', 'foobarbar', 5);
  locate 
--------
      7
(1 row)
    </programlisting>
   </sect3>
 </sect2>

 <sect2>
  <title>Operator type compatibility</title>
  <para>
    Add type overloading between text and Numeric Types(int2, int4, int8, numeric) for operators
    such as '+', '-', '*', '/', '&lt;', '&lt;=', '&gt;', '&gt;=', '=', '&lt;&gt;' and '%'.
  </para>

  <para>
    <emphasis role="bold">
     Example
    </emphasis>
  </para>
  <para>
    With it, you can directly add '1.1'::text with 1. 
  </para>
    <programlisting>
lightdb@test=# select '1.1'::text+1;
 ?column? 
----------
      2.1
(1 row)
    </programlisting>
  <para>
   When in Oracle or MySQL compatible type (see <xref linkend="guc-lightdb-syntax-compatible-type"/>),
   base on the rule that 'unknown' can convert to 'text' in some situations (see <xref linkend="typeconv"/> for details), 
   you can directly add '1.1' with 1. 
  </para>
    <programlisting>
lightdb@test=# select '1.1'+1;
 ?column? 
----------
      2.1
(1 row)
    </programlisting>
 </sect2> 
</sect1>
