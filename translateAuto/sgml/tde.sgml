<!-- doc/src/sgml/tde.sgml -->

 <chapter id="tde">
  <title>Transparent Data Encryption</title>

  <indexterm zone="tde">
   <primary>transparent data encryption</primary>
  </indexterm>

  <para>
    TDE(Transparent Data Encryption) is to store all files constituting the database cluster securely on the disk in an encrypted format (static data encryption), and then decrypt them when reading blocks from the disk. Data is unencrypted in memory.
  </para>

  <para>
    TDE has the following characteristics:
  </para>

  <itemizedlist>
      <listitem>
          <para>
            The encryption is transparent from the application’s point of view.
          </para>
      </listitem>

        <listitem>
            <para>
              It uses a single key to encrypt the whole cluster.
            </para>
        </listitem>
    </itemizedlist>

    <para>
      During startup, the server can access the key of the initialization database and
      provide the encryption key through a special configuration parameter, which specifies
      a custom key setting command for realizing special security requirements. TDE internally
      uses the industry standard 128 bit aes-ctr encryption algorithm to encrypt / decrypt
      data blocks on the disk.
    </para>

    <para>
        Use <literal>lt_initdb</literal> passes in the TDE key through the -K option. Before creating a database instance,
        you must write some code to ensure that the database can read the key during startup and instance creation.
        Note that this key is never visible to anybody but the database server.
        The key must be a 32 byte hexadecimal string, or an error will be reported when initializing the instance:
    </para>

    <programlisting>
    fatal: encryption key is too short, should be a 32 character hex key
    </programlisting>

    <para>
        Here is an example:
    </para>

    <programlisting>
    cat /somewhere/provide_key.sh
    #!/bin/sh
    echo 882fb7c12e80280fd664c69d2d636913
    </programlisting>

    <para>
        All you need is a program that prints the key to stdout, and make sure that LightDB is able to execute this program:
    </para>

    <programlisting>
    chmod +x /somewhere/provide_key.sh
    </programlisting>

    <para>
        Create a database instance:
    </para>

    <programlisting>
    lt_initdb -p 5432 -D ./data -K /somewhere/provide_key.sh
    </programlisting>

    <para>
        You can use <literal>lt_controldata</literal> to determine whether the current instance has used transparent encryption.
        At the end of the listing, you can find the encryption details.
    </para>

    <para>
        The GUC parameter of <literal>lightdb_encryption_key_command</literal> will exist in the lightdb.conf
        configuration file, which ensures that the TDE key will be read again after each restart of the data.
    </para>

    <para>
        Note that we don’t currently support in-place encryption of existing clusters. You will need to perform a dump and
        reload to an encrypted instance, or use logical replication to perform the migration online.
    </para>
</chapter>