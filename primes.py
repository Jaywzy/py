# 打印素数
# 计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：
# 首先，列出从2开始的所有自然数，构造一个序列：
# 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...
# 取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：
# 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...
# 取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：
# 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...
# 取新序列的第一个数5，然后用5把序列的5的倍数筛掉：
# 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...
# 不断筛下去，就可以得到所有的素数。

# 生成器 - 生成所有奇数，作为基础数列
def _odd_iter():
    n = 1
    while True:
        n = n + 2
        yield n

# 高阶函数 - 返回判断不可整除n的函数，用于filter中使用
# 因为n是可变的，所以用于filter中每次需要重新生成该函数
def _not_divisible(n):
    return lambda x: x % n > 0

# 生成素数主函数 - 因为是无限序列，肯定要构造生成器
def primes():
    yield 2
    l = _odd_iter()
    while True:
        n = next(l)
        yield n
        l = filter(_not_divisible(n), l)

# 打印1000以内的素数:
l = []
for n in primes():
    if n < 1000:
        l.append(n)
    else:
        break
print(l)